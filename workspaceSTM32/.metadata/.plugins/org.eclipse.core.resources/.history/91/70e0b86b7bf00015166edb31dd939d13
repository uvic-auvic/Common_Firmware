//
// This file is part of the GNU ARM Eclipse distribution.
// Copyright (c) 2014 Liviu Ionescu.
//

#include "SPI_DMA.h"
/* Private variables ---------------------------------------------------------*/
const uint8_t stringtosendwSPI1[] = "DMA with SPI 1"; /* Both strings have same length */
const uint8_t stringtosendwSPI2[] = "And with SPI 2"; /* Receive and transmit are done in the same transaction */
uint8_t * stringtoreceivewSPI1;
uint8_t * stringtoreceivewSPI2;
// ----------------------------------------------------------------------------
/**
  * @brief  This function :
             - Enables GPIO clock
             - Configures the Green LED pin on GPIO PC9
             - Configures the orange LED pin on GPIO PC8
  * @param  None
  * @retval None
  */
__INLINE void Configure_GPIO_LED(void)
{
  /* Enable the peripheral clock of GPIOC */
  RCC->AHBENR |= RCC_AHBENR_GPIOCEN;

  /* Select output mode (01) on PC6, PC7, PC8 and PC9 */
  GPIOC->MODER = (GPIOC->MODER & ~(GPIO_MODER_MODER6 | GPIO_MODER_MODER7)) \
                 | (GPIO_MODER_MODER6_0 | GPIO_MODER_MODER7_0);
  GPIOC->MODER = (GPIOC->MODER & ~(GPIO_MODER_MODER8 | GPIO_MODER_MODER9)) \
                 | (GPIO_MODER_MODER8_0 | GPIO_MODER_MODER9_0);
}

/**
  * @brief  This function :
             - Enables GPIO clock
             - Configures the SPI1 pins on GPIO PA4 PA5 PA6 PA7
  * @param  None
  * @retval None
  */
__INLINE void Configure_GPIO_SPI1(void)
{
  /* Enable the peripheral clock of GPIOA */
  RCC->AHBENR |= RCC_AHBENR_GPIOAEN;

  /* (1) Select AF mode (10) on PA4, PA5, PA6, PA7 */
  /* (2) AF0 for SPI1 signals */
  GPIOA->MODER = (GPIOA->MODER
                  & ~(GPIO_MODER_MODER4 | GPIO_MODER_MODER5 | \
                      GPIO_MODER_MODER6 | GPIO_MODER_MODER7))\
                  | (GPIO_MODER_MODER4_1 | GPIO_MODER_MODER5_1 |\
                     GPIO_MODER_MODER6_1 | GPIO_MODER_MODER7_1); /* (1) */
  GPIOA->AFR[0] = (GPIOA->AFR[0] & \
                   ~(GPIO_AFRL_AFRL4 | GPIO_AFRL_AFRL5 |\
                     GPIO_AFRL_AFRL6 | GPIO_AFRL_AFRL7)); /* (2) */
}

/**
  * @brief  This function configures DMA for SPI1.
  * @param  None
  * @retval None
  */
__INLINE void Configure_DMA1_SPI1(void)
{
  /* Enable the peripheral clock DMA11 */
  RCC->AHBENR |= RCC_AHBENR_DMA1EN;

  /* DMA1 Channel2 SPI1_RX config */
  /* (1) Peripheral address */
  /* (2) Memory address */
  /* (3) Data size */
  /* (4) Memory increment */
  /*     Peripheral to memory */
  /*     8-bit transfer */
  /*     Transfer complete IT */
  DMA1_Channel2->CPAR = (uint32_t)&(SPI1->DR); /* (1) */
  stringtoreceivewSPI1 = malloc(sizeof(stringtosendwSPI2));
  DMA1_Channel2->CMAR = (uint32_t)stringtoreceivewSPI1; /* (2) */
  DMA1_Channel2->CNDTR = sizeof(stringtosendwSPI2); /* (3) */
  DMA1_Channel2->CCR |= DMA_CCR_MINC | DMA_CCR_TCIE  | DMA_CCR_EN; /* (4) */

  /* DMA1 Channel3 SPI1_TX config */
  /* (5) Peripheral address */
  /* (6) Memory address */
  /* (7) Memory increment */
  /*     Memory to peripheral*/
  /*     8-bit transfer */
  DMA1_Channel3->CPAR = (uint32_t)&(SPI1->DR); /* (5) */
  DMA1_Channel3->CMAR = (uint32_t)stringtosendwSPI1; /* (6) */
  DMA1_Channel3->CCR |= DMA_CCR_MINC | DMA_CCR_DIR; /* (7) */

  /* Configure IT */
  /* (8) Set priority for DMA1_Channel2_3_IRQn */
  /* (9) Enable DMA1_Channel2_3_IRQn */
  NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0); /* (8) */
  NVIC_EnableIRQ(DMA1_Channel2_3_IRQn); /* (9) */
}

/**
  * @brief  This function configures SPI1.
  * @param  None
  * @retval None
  */
__INLINE void Configure_SPI1(void)
{
  /* Enable the peripheral clock SPI1 */
  RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;

  /* Configure SPI1 in master */
  /* (1) Master selection, BR: Fpclk/256 (due to C27 on the board, SPI_CLK is set to the minimum)
         CPOL and CPHA at zero (rising first edge) */
  /* (2) TX and RX with DMA, slave select output enabled, RXNE IT, 8-bit Rx fifo */
  /* (3) Enable SPI1 */
  SPI1->CR1 = SPI_CR1_MSTR | SPI_CR1_BR; /* (1) */
  SPI1->CR2 = SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN | SPI_CR2_SSOE | SPI_CR2_RXNEIE | SPI_CR2_FRXTH | SPI_CR2_DS_2 | SPI_CR2_DS_1 | SPI_CR2_DS_0; /* (2) */
  SPI1->CR1 |= SPI_CR1_SPE; /* (3) */
}

/**
  * @brief  This function :
             - Enables GPIO clock
             - Configures the SPI2 pins on GPIO PB12 PB13 PB14 PB15
  * @param  None
  * @retval None
  */
__INLINE void Configure_GPIO_SPI2(void)
{
  /* Enable the peripheral clock of GPIOB */
  RCC->AHBENR |= RCC_AHBENR_GPIOBEN;

  /* (1) Select AF mode (10) on PB12, PB13, PB14, PB15 */
  /* (2) AF0 for SPI2 signals */
  GPIOB->MODER = (GPIOB->MODER
                 & ~(GPIO_MODER_MODER12 | GPIO_MODER_MODER13 | \
                     GPIO_MODER_MODER14 | GPIO_MODER_MODER15))\
                 | (GPIO_MODER_MODER12_1 | GPIO_MODER_MODER13_1|\
                    GPIO_MODER_MODER14_1 | GPIO_MODER_MODER15_1); /* (1) */
  GPIOB->AFR[1] = (GPIOB->AFR[1] & \
                   ~(GPIO_AFRH_AFRH4 | GPIO_AFRH_AFRH5 |\
                     GPIO_AFRH_AFRH6 | GPIO_AFRH_AFRH7)); /* (2) */
}

/**
  * @brief  This function configures DMA for SPI2.
  * @param  None
  * @retval None
  */
__INLINE void Configure_DMA1_SPI2(void)
{
  /* Enable the peripheral clock DMA11 */
  RCC->AHBENR |= RCC_AHBENR_DMA1EN;

  /* DMA1 Channel4 SPI2_RX config */
  /* (1) Peripheral address */
  /* (2) Memory address */
  /* (3) Data size */
  /* (4) Memory increment */
  /*     Peripheral to memory */
  /*     8-bit transfer */
  /*     Transfer complete IT */
  DMA1_Channel4->CPAR = (uint32_t)&(SPI2->DR); /* (1) */
  stringtoreceivewSPI2 = malloc(sizeof(stringtosendwSPI1));
  DMA1_Channel4->CMAR = (uint32_t)stringtoreceivewSPI2; /* (2) */
  DMA1_Channel4->CNDTR = sizeof(stringtosendwSPI1); /* (3) */
  DMA1_Channel4->CCR |= DMA_CCR_MINC | DMA_CCR_TCIE  | DMA_CCR_EN; /* (4) */

  /* DMA1 Channel5 SPI2_TX config */
  /* (5) Peripheral address */
  /* (6) Memory address */
  /* (7) Memory increment */
  /*     Memory to peripheral*/
  /*     8-bit transfer */
  DMA1_Channel5->CPAR = (uint32_t)&(SPI2->DR); /* (5) */
  DMA1_Channel5->CMAR = (uint32_t)stringtosendwSPI2; /* (6) */
  DMA1_Channel5->CCR |= DMA_CCR_MINC | DMA_CCR_DIR; /* (7) */

  /* Configure IT */
  /* (8) Set priority for DMA1_Channel4_5_6_7_IRQn */
  /* (9) Enable DMA1_Channel4_5_6_7_IRQn */
  NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0); /* (8) */
  NVIC_EnableIRQ(DMA1_Channel4_5_IRQn); /* (9) */

}

/**
  * @brief  This function configures SPI2.
  * @param  None
  * @retval None
  */
__INLINE void Configure_SPI2(void)
{
   /* Enable the peripheral clock SPI2 */
  RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;

  /* Configure SPI2 in slave */
  /* nSS hard, slave, CPOL and CPHA at zero (rising first edge) */
  /* (1) TX and RX with DMA, RXNE IT, 8-bit Rx fifo */
  /* (2) Enable SPI2 */
  SPI2->CR2 = SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN | SPI_CR2_RXNEIE | SPI_CR2_FRXTH | SPI_CR2_DS_2 | SPI_CR2_DS_1 | SPI_CR2_DS_0; /* (1) */
  SPI2->CR1 |= SPI_CR1_SPE; /* (2) */
}

/**
  * @brief  This function :
             - Enables GPIO clock
             - Configures the Push Button GPIO PA0
  * @param  None
  * @retval None
  */
__INLINE void Configure_GPIO_Button(void)
{
  /* Enable the peripheral clock of GPIOA */
  RCC->AHBENR |= RCC_AHBENR_GPIOAEN;

  /* Select mode */
  /* Select input mode (00) on PA0 */
  GPIOA->MODER = (GPIOA->MODER & ~(GPIO_MODER_MODER0));
}

/**
  * @brief  This function configures EXTI.
  * @param  None
  * @retval None
  */
__INLINE void Configure_EXTI(void)
{
  /* Configure Syscfg, exti and nvic for pushbutton PA0 */
  /* (1) PA0 as source input */
  /* (2) unmask port 0 */
  /* (3) Rising edge */
  /* (4) Set priority */
  /* (5) Enable EXTI0_1_IRQn */
  SYSCFG->EXTICR[0] = (SYSCFG->EXTICR[0] & ~SYSCFG_EXTICR1_EXTI0) | SYSCFG_EXTICR1_EXTI0_PA; /* (1) */
  EXTI->IMR |= EXTI_IMR_MR0; /* (2) */
  EXTI->RTSR |= EXTI_RTSR_TR0; /* (3) */
  NVIC_SetPriority(EXTI0_1_IRQn, 0); /* (4) */
  NVIC_EnableIRQ(EXTI0_1_IRQn); /* (5) */
}

// ----------------------------------------------------------------------------
